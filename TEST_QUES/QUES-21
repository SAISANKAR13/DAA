MOD = 10**9 + 7

def count_good_strings(n, s1, s2, evil):
    m = len(evil)

    def contains_evil(s):
        return evil in s

    def get_lps(pattern):
        lps = [0] * len(pattern)
        j = 0
        for i in range(1, len(pattern)):
            if pattern[i] == pattern[j]:
                j += 1
                lps[i] = j
            else:
                if j != 0:
                    j = lps[j-1]
                    i -= 1
                else:
                    lps[i] = 0
        return lps

    lps = get_lps(evil)

    memo = {}

    def dfs(pos, prefix1, prefix2, evil_matched):
        if evil_matched == m:
            return 0
        if pos == n:
            return 1
        if (pos, prefix1, prefix2, evil_matched) in memo:
            return memo[(pos, prefix1, prefix2, evil_matched)]

        start = s1[pos] if prefix1 else 'a'
        end = s2[pos] if prefix2 else 'z'

        total = 0

        for char in range(ord(start), ord(end) + 1):
            char = chr(char)
            new_prefix1 = prefix1 and (char == s1[pos])
            new_prefix2 = prefix2 and (char == s2[pos])
            
            j = evil_matched
            while j > 0 and char != evil[j]:
                j = lps[j-1]
            if char == evil[j]:
                j += 1

            total = (total + dfs(pos + 1, new_prefix1, new_prefix2, j)) % MOD

        memo[(pos, prefix1, prefix2, evil_matched)] = total
        return total
    
    return dfs(0, True, True, 0)

n = 2
s1 = "aa"
s2 = "da"
evil = "b"
print(count_good_strings(n, s1, s2, evil))  
