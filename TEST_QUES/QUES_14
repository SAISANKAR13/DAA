class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def sortList(head):
    if not head or not head.next:
        return head

    def split(head):
        slow, fast = head, head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        mid = slow.next
        slow.next = None
        return head, mid

    def merge(l1, l2):
        dummy = ListNode()
        tail = dummy
        while l1 and l2:
            if l1.val < l2.val:
                tail.next, l1 = l1, l1.next
            else:
                tail.next, l2 = l2, l2.next
            tail = tail.next
        tail.next = l1 if l1 else l2
        return dummy.next

    left, right = split(head)

    left = sortList(left)
    right = sortList(right)
    return merge(left, right)

def print_list(head):
    while head:
        print(head.val, end=" ")
        head = head.next
    print()

head = ListNode(4, ListNode(2, ListNode(1, ListNode(3))))

sorted_head = sortList(head)
print("Sorted Linked List:", end=" ")
print_list(sorted_head)  
