from heapq import heappush, heappop

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __lt__(self, other):
        return self.val < other.val

def mergeKLists(lists):
    min_heap = []
    
    for l in lists:
        if l:
            heappush(min_heap, l)
    dummy = ListNode(0)
    current = dummy
    
    while min_heap:
        smallest_node = heappop(min_heap)
        current.next = smallest_node
        current = current.next
 
        if smallest_node.next:
            heappush(min_heap, smallest_node.next)
    
    return dummy.next

def create_linked_list(arr):
    if not arr:
        return None
    head = ListNode(arr[0])
    current = head
    for val in arr[1:]:
        current.next = ListNode(val)
        current = current.next
    return head

def linked_list_to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

lists = [
    create_linked_list([1, 4, 5]),
    create_linked_list([1, 3, 4]),
    create_linked_list([2, 6])
]

merged_head = mergeKLists(lists)
print(linked_list_to_list(merged_head))  # Output: [1, 1, 2, 3, 4, 4, 5, 6]
