import math

def dist(p1, p2):
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

def brute_force(P):
    min_val = float('inf')
    n = len(P)
    for i in range(n):
        for j in range(i + 1, n):
            if dist(P[i], P[j]) < min_val:
                min_val = dist(P[i], P[j])
    return min_val

def strip_closest(strip, d):
    min_val = d
    strip.sort(key = lambda point: point[1])
    for i in range(len(strip)):
        for j in range(i+1, len(strip)):
            if (strip[j][1] - strip[i][1]) < min_val:
                min_val = min(min_val, dist(strip[i], strip[j]))
    return min_val

def closest_util(P, Q, n):
    if n <= 3:
        return brute_force(P)

    mid = n // 2
    mid_point = P[mid]

    dl = closest_util(P[:mid], Q, mid)
    dr = closest_util(P[mid:], Q, n - mid)

    d = min(dl, dr)

    strip = []
    for i in range(n):
        if abs(P[i][0] - mid_point[0]) < d:
            strip.append(P[i])

    return min(d, strip_closest(strip, d))

def closest(P):
    P.sort(key = lambda point: point[0])
    Q = P.copy()
    return closest_util(P, Q, len(P))

P = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
print("The smallest distance is:", closest(P))
