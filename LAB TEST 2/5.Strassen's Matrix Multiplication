import numpy as np

def strassen_matrix_multiply(x, y):
    if len(x) == 1:
        return x * y

    size = len(x) // 2
    a = x[:size, :size]
    b = x[:size, size:]
    c = x[size:, :size]
    d = x[size:, size:]

    e = y[:size, :size]
    f = y[:size, size:]
    g = y[size:, :size]
    h = y[size:, size:]

    p1 = strassen_matrix_multiply(a, f - h)
    p2 = strassen_matrix_multiply(a + b, h)
    p3 = strassen_matrix_multiply(c + d, e)
    p4 = strassen_matrix_multiply(d, g - e)
    p5 = strassen_matrix_multiply(a + d, e + h)
    p6 = strassen_matrix_multiply(b - d, g + h)
    p7 = strassen_matrix_multiply(a - c, e + f)

    result = np.zeros((len(x), len(y)))

    result[:size, :size] = p5 + p4 - p2 + p6
    result[:size, size:] = p1 + p2
    result[size:, :size] = p3 + p4
    result[size:, size:] = p1 + p5 - p3 - p7

    return result

# Test the Strassen's algorithm
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])
C = strassen_matrix_multiply(A, B)
print("Resulting matrix:\n", C)
