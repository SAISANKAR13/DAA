import heapq
from typing import List, Tuple

def dijkstra_edge_list(n: int, edges: List[Tuple[int, int, int]], source: int, target: int) -> int:
    graph = {i: [] for i in range(n)}
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w)) 

    distances = {i: float('inf') for i in range(n)}
    distances[source] = 0
    min_heap = [(0, source)]  

    while min_heap:
        current_dist, u = heapq.heappop(min_heap)

        if current_dist > distances[u]:
            continue

        if u == target:
            return distances[u]

        for v, weight in graph[u]:

            new_dist = current_dist + weight

            if new_dist < distances[v]:
                distances[v] = new_dist
                heapq.heappush(min_heap, (new_dist, v))

    return float('inf')
n = 6
edges = [
    (0, 1, 7), (0, 2, 9), (0, 5, 14),
    (1, 2, 10), (1, 3, 15), (2, 3, 11),
    (2, 5, 2), (3, 4, 6), (4, 5, 9)
]
source = 0
target = 4
print(dijkstra_edge_list(n, edges, source, target))
